<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>React - Tag - 生死的智慧</title>
        <link>http://example.org/tags/react/</link>
        <description>React - Tag - 生死的智慧</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jan 2024 16:10:12 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/react/" rel="self" type="application/rss+xml" /><item>
    <title>开始学习React的这几天</title>
    <link>http://example.org/posts/learn-react/</link>
    <pubDate>Thu, 04 Jan 2024 16:10:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/learn-react/</guid>
    <description><![CDATA[作为一个半吊子的前端开发人员，写过uniapp,小程序，甚至有时候还得帮别人维护一下Jquery写的网站，却长时间并没有想法去接触React。最近尝试着入门一下React，对于我写代码的冲击还是挺大的。
从官方手册,Next.js,阅读代码开始 大致的看了一下Next.js的框架，把官网的手册快速的过了一遍，尝试性的写了一下demo的代码，发现react的写法和vue的写法完全就是两种不一样的写法。
大概花了2天看了一下手册，然后我找了两个开源的blog源代码去看，一个是cali.so,另一个是Shiro。两个的源代码都是非常的好，但是在初入门的情况下，看起来非常的吃力，就是代码量怎么这么多。里面包含了React中引入的各种serveless包，form验证，ui框架等等，时常让我感觉到疑惑，然后去查找相关的资料，为什么用这个，又为什么这么写，是需要实现什么样的功能。所以，两个源代码的话，其实我大概就是分析结构和功能。
后面在油管中找了Code With Antonio的免费的全栈开发视频，对于我的入门帮助更大。在倍速的情况下，我快速的了解了一个React要开发一个copycat项目的模块，然后一些简单的Server端api的写法，至少可以糊一个网站出来。
从现在开始，我可以说自己React入门了，至少可以开始开发一个项目了。后面的学习就是不断的去看别人的代码，思考自己该如何写代码。]]></description>
</item>
</channel>
</rss>
